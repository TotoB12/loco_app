I am developing a simple mobile application that allows people to share their live location with others. I am currently trying to develop the part of it that will send regular location updates to the Firestone Database, and have it be fully functional on Android and iOS. I have it coded it in Native Expo React.
I want to have my app work as efficiently as possible, with great accuracy and low battery usage. Ideally, I want my app to have a background task that runs whenever the app is closed, sending the user's current location to their user item in the database. I know that using Expo React, the background tasks of Android and iPhone devices are different, but I want you to help me find the best solution to work properly with both platforms. I want to replicate the services of other apps like Google Maps sharing or WhatsApp sharing, but better. The best would be to have my app send a location update every minute. The database should hold the latest position as part of the user item, along with the timestamp.

Here is the current setup.

App.js
```javascript
// App.js
import React, { useEffect, useState } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from './firebaseConfig';

import LoginScreen from './screens/LoginScreen';
import SignupScreen from './screens/SignupScreen';
import HomeScreen from './screens/HomeScreen';

// Import the methods to start/stop tracking:
import { startLocationTracking, stopLocationTracking } from './LocationTask';

const Stack = createStackNavigator();

export default function App() {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      
      if (currentUser) {
        // Start background location tracking if user logs in
        await startLocationTracking();
      } else {
        // Stop tracking if user logs out
        await stopLocationTracking();
      }
    });
    return () => unsubscribe();
  }, []);

  return (
    <NavigationContainer>
      <Stack.Navigator>
        {user ? (
          // If user is logged in, show HomeScreen
          <Stack.Screen
            name="Home"
            component={HomeScreen}
            options={{ headerShown: false }}
          />
        ) : (
          // If not logged in, show Login / Signup
          <>
            <Stack.Screen
              name="Login"
              component={LoginScreen}
              options={{ headerShown: false }}
            />
            <Stack.Screen
              name="Signup"
              component={SignupScreen}
              options={{ headerShown: false }}
            />
          </>
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
}
```

screens/HomeScreen.js
```javascript
// screens/HomeScreen.js
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import { signOut } from 'firebase/auth';
import { auth, db } from '../firebaseConfig';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';
import * as Location from 'expo-location';

export default function HomeScreen() {
  const [foregroundSubscription, setForegroundSubscription] = useState(null);
  const [currentLocation, setCurrentLocation] = useState(null);

  useEffect(() => {
    // Start foreground updates when this screen mounts
    startForegroundTracking();
    // Cleanup on unmount
    return () => {
      foregroundSubscription?.remove();
    };
  }, []);

  const startForegroundTracking = async () => {
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Error', 'Foreground location permission not granted');
      return;
    }

    console.log('Starting foreground location updates...');

    const subscription = await Location.watchPositionAsync(
      {
        accuracy: Location.Accuracy.High,
        distanceInterval: 0,   // or set a number of meters
        timeInterval: 10000,   // or set in ms, ~10 seconds
      },
      async (location) => {
        console.log('Foreground location updated:', location.coords);
        setCurrentLocation(location.coords);

        try {
          const user = auth.currentUser;
          if (!user) return; // if somehow user is null, skip

          console.log('Updating Firestore with foreground location...');

          await setDoc(
            doc(db, 'users', user.uid),
            {
              location: {
                latitude: location.coords.latitude,
                longitude: location.coords.longitude,
                accuracy: location.coords.accuracy,
                altitude: location.coords.altitude,
                heading: location.coords.heading,
                speed: location.coords.speed,
              },
              locationTimestamp: serverTimestamp(),
            },
            { merge: true }
          );
        } catch (err) {
          console.log('Error updating Firestore in foreground:', err);
        }
      }
    );

    setForegroundSubscription(subscription);
  };

  const handleSignOut = async () => {
    try {
      await signOut(auth);
    } catch (error) {
      Alert.alert('Error', 'Could not sign out');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Thank you for testing!</Text>
      {currentLocation ? (
        <Text style={styles.text}>
          Foreground location: 
          {'\n'}Lat: {currentLocation.latitude}, Lng: {currentLocation.longitude}
        </Text>
      ) : (
        <Text style={styles.text}>No location yet...</Text>
      )}
      <TouchableOpacity style={styles.button} onPress={handleSignOut}>
        <Text style={styles.buttonText}>Log Out</Text>
      </TouchableOpacity>
    </View>
  );
}

// Basic styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#212832',
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 28,
    color: '#fff',
    marginBottom: 20,
  },
  text: {
    color: '#fff',
    marginBottom: 20,
    textAlign: 'center'
  },
  button: {
    width: 150,
    height: 50,
    backgroundColor: '#f54242',
    borderRadius: 5,
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
  },
});
```

screens/LoginScreen.js
```javascript
// screens/LoginScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  StyleSheet,
  KeyboardAvoidingView,
  ScrollView,
  Platform,
} from 'react-native';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../firebaseConfig';

export default function LoginScreen({ navigation }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    try {
      if (!email || !password) {
        Alert.alert('Error', 'Please fill in all fields');
        return;
      }

      await signInWithEmailAndPassword(auth, email.trim(), password);
      // On success, the user is automatically tracked by `onAuthStateChanged`
      // in App.js, which navigates them to Home screen
    } catch (error) {
      Alert.alert('Login Error', error.message);
    }
  };

  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView
        contentContainerStyle={styles.scrollContainer}
        keyboardShouldPersistTaps="handled"
      >
        <View style={styles.inner}>
          <Text style={styles.title}>Login</Text>

          <TextInput
            style={styles.input}
            placeholder="Email"
            placeholderTextColor="#999"
            value={email}
            onChangeText={(text) => setEmail(text)}
            keyboardType="email-address"
            autoCapitalize="none"
          />

          <TextInput
            style={styles.input}
            placeholder="Password"
            placeholderTextColor="#999"
            secureTextEntry
            value={password}
            onChangeText={(text) => setPassword(text)}
          />

          <TouchableOpacity style={styles.button} onPress={handleLogin}>
            <Text style={styles.buttonText}>Log In</Text>
          </TouchableOpacity>

          <TouchableOpacity onPress={() => navigation.navigate('Signup')}>
            <Text style={{ marginTop: 20, color: '#0275d8' }}>
              Donâ€™t have an account? Sign up
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  scrollContainer: {
    flexGrow: 1,
  },
  inner: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    backgroundColor: '#212832', // or your preferred background
  },
  title: {
    fontSize: 32,
    color: '#fff',
    marginBottom: 30,
    textAlign: 'center',
  },
  input: {
    width: '100%',
    height: 50,
    backgroundColor: '#333',
    borderRadius: 5,
    paddingHorizontal: 15,
    color: '#fff',
    marginBottom: 15,
  },
  button: {
    height: 50,
    backgroundColor: '#00ADB5',
    borderRadius: 5,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 15,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
  },
});
```

screens/SignupScreen.js
```javascript
// SignupScreen.js
import React, { useState } from 'react';
import {
    View,
    Text,
    TextInput,
    TouchableOpacity,
    Alert,
    StyleSheet,
    KeyboardAvoidingView,
    ScrollView,
    Platform,
} from 'react-native';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';
import { auth, db } from '../firebaseConfig';

export default function SignupScreen({ navigation }) {
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleSignup = async () => {
        try {
            if (!firstName || !lastName || !email || !password) {
                Alert.alert('Error', 'Please fill in all fields');
                return;
            }
            const userCredential = await createUserWithEmailAndPassword(auth, email.trim(), password);
            const user = userCredential.user;
            await setDoc(doc(db, 'users', user.uid), {
                createdAt: serverTimestamp(),
                firstName: firstName.trim(),
                lastName: lastName.trim(),
                email: email.trim(),
            });
            Alert.alert('Success', 'Account created successfully');
        } catch (error) {
            Alert.alert('Signup Error', error.message);
        }
    };

    return (
        <KeyboardAvoidingView
            style={{ flex: 1 }}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        >
            <ScrollView
                contentContainerStyle={styles.scrollContainer}
                keyboardShouldPersistTaps="handled"
            >
                <View style={styles.inner}>
                    <Text style={styles.title}>Sign Up</Text>

                    <TextInput
                        style={styles.input}
                        placeholder="First Name"
                        placeholderTextColor="#999"
                        value={firstName}
                        onChangeText={setFirstName}
                    />
                    <TextInput
                        style={styles.input}
                        placeholder="Last Name"
                        placeholderTextColor="#999"
                        value={lastName}
                        onChangeText={setLastName}
                    />
                    <TextInput
                        style={styles.input}
                        placeholder="Email"
                        placeholderTextColor="#999"
                        value={email}
                        onChangeText={setEmail}
                        keyboardType="email-address"
                        autoCapitalize="none"
                    />
                    <TextInput
                        style={styles.input}
                        placeholder="Password"
                        placeholderTextColor="#999"
                        secureTextEntry
                        value={password}
                        onChangeText={setPassword}
                    />

                    <TouchableOpacity style={styles.button} onPress={handleSignup}>
                        <Text style={styles.buttonText}>Create Account</Text>
                    </TouchableOpacity>

                    <TouchableOpacity onPress={() => navigation.navigate('Login')}>
                        <Text style={{ marginTop: 20, color: '#0275d8' }}>
                            Already have an account? Log in
                        </Text>
                    </TouchableOpacity>
                </View>
            </ScrollView>
        </KeyboardAvoidingView>
    );
}

const styles = StyleSheet.create({
    scrollContainer: {
        flexGrow: 1,
    },
    inner: {
        flex: 1,
        padding: 20,
        justifyContent: 'center',
    },
    title: {
        fontSize: 32,
        color: '#fff',
        marginBottom: 30,
        textAlign: 'center',
    },
    input: {
        width: '100%',
        height: 50,
        backgroundColor: '#333',
        borderRadius: 5,
        paddingHorizontal: 15,
        color: '#fff',
        marginBottom: 15,
    },
    button: {
        height: 50,
        backgroundColor: '#00ADB5',
        borderRadius: 5,
        alignItems: 'center',
        justifyContent: 'center',
        marginTop: 15,
    },
    buttonText: {
        color: '#fff',
        fontSize: 18,
    },
});
```

LocationTask.js
```javascript
// LocationTask.js

import * as TaskManager from 'expo-task-manager';
import * as BackgroundFetch from 'expo-background-fetch';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';
import { db } from './firebaseConfig'; // Make sure this points to your db
import { getAuth } from 'firebase/auth'; // Only if you need currentUser from Firebase
import * as Location from 'expo-location';

const LOCATION_TRACKING = 'LOCATION_TRACKING';

// 1. Define the background task
TaskManager.defineTask(LOCATION_TRACKING, async ({ data, error }) => {
  if (error) {
    console.error('Location task error:', error);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
  
  if (data) {
    const { locations } = data;
    const location = locations[0];
    if (location) {
      try {
        // 2. Get the currently logged in user
        const auth = getAuth();
        const user = auth.currentUser; 
        // If user is logged out, do nothing
        if (!user) {
          console.log('No user, skipping location update');
          return BackgroundFetch.BackgroundFetchResult.NoData;
        }

        // 3. Send location data to Firestore
        const userRef = doc(db, 'users', user.uid);
        await setDoc(
          userRef,
          {
            location: {
              latitude: location.coords.latitude,
              longitude: location.coords.longitude,
              // You can store more data if you need:
              accuracy: location.coords.accuracy,
              altitude: location.coords.altitude,
              heading: location.coords.heading,
              speed: location.coords.speed
            },
            locationTimestamp: serverTimestamp(),
          },
          { merge: true }
        );

        console.log('Background location updated:', location.coords);
        // Return that we have new data
        return BackgroundFetch.BackgroundFetchResult.NewData;
      } catch (e) {
        console.error('Error updating location in Firestore:', e);
        return BackgroundFetch.BackgroundFetchResult.Failed;
      }
    }
  }

  // If no data, we return NoData
  return BackgroundFetch.BackgroundFetchResult.NoData;
});

export async function startLocationTracking() {
  console.log('Starting location tracking...');
  // Request permissions in case they haven't been granted yet:
  const fgPermission = await Location.requestForegroundPermissionsAsync();
  if (fgPermission.status !== 'granted') {
    console.log('Foreground location permission not granted');
    return;
  }

  const bgPermission = await Location.requestBackgroundPermissionsAsync();
  if (bgPermission.status !== 'granted') {
    console.log('Background location permission not granted');
    return;
  }

  // Check if task is already running
  const hasStarted = await Location.hasStartedLocationUpdatesAsync(LOCATION_TRACKING);
  if (hasStarted) {
    console.log('Already started background location updates');
    return;
  }

  // Start background location updates
  await Location.startLocationUpdatesAsync(LOCATION_TRACKING, {
    accuracy: Location.Accuracy.Balanced,  // or High if you need it
    // Optionally set the distance or time interval to reduce battery usage
    timeInterval: 60000, // Minimum time (ms) between updates ~ 1 minute
    // distanceInterval: 50, // Receive updates only when user moves 50 meters
    foregroundService: {
      notificationTitle: 'Location Tracking',
      notificationBody: 'We are tracking your location in the background',
      notificationColor: '#fff',
    },
    pausesUpdatesAutomatically: false,
    // On Android, set these to ensure the background service runs:
    showsBackgroundLocationIndicator: true,
  });

  // Also register the background fetch so iOS can schedule the task:
  await BackgroundFetch.registerTaskAsync(LOCATION_TRACKING, {
    minimumInterval: 60, // 1 minute
    stopOnTerminate: false,
    startOnBoot: true,
  });

  console.log('Background location tracking started');
}

export async function stopLocationTracking() {
  console.log('Stopping location tracking...');
  const hasStarted = await Location.hasStartedLocationUpdatesAsync(LOCATION_TRACKING);
  if (hasStarted) {
    await Location.stopLocationUpdatesAsync(LOCATION_TRACKING);
  }
  // Unregister as well from background fetch
  const isRegistered = await TaskManager.isTaskRegisteredAsync(LOCATION_TRACKING);
  if (isRegistered) {
    await BackgroundFetch.unregisterTaskAsync(LOCATION_TRACKING);
  }
  console.log('Background location tracking stopped');
}
```

firebaseConfig.js
```javascript
// firebaseConfig.js
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

import { initializeAuth, getReactNativePersistence } from 'firebase/auth';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Replace with your own Firebase config!
const firebaseConfig = {
    apiKey: "AIzaSyAR24CQPymO-X5-6L-JeKRGfyqXm3n8MOs",
    authDomain: "totob12-loco.firebaseapp.com",
    projectId: "totob12-loco",
    storageBucket: "totob12-loco.firebasestorage.app",
    messagingSenderId: "1079141322842",
    appId: "1:1079141322842:web:ea9606c2ad097ea3f30863"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Set up Auth with persistence:
export const auth = initializeAuth(app, {
    persistence: getReactNativePersistence(AsyncStorage),
});

export const db = getFirestore(app);
```

package.json
```json
{
  "name": "loco",
  "license": "0BSD",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start --dev-client",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-navigation/native": "^7.0.14",
    "@react-navigation/stack": "^7.1.1",
    "expo": "~52.0.24",
    "expo-background-fetch": "~13.0.4",
    "expo-dev-client": "~5.0.9",
    "expo-location": "~18.0.5",
    "expo-status-bar": "~2.0.0",
    "expo-task-manager": "~12.0.4",
    "firebase": "^11.1.0",
    "react": "18.3.1",
    "react-native": "0.76.5",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-keyboard-aware-scroll-view": "^0.9.5",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}
```

app.json
```json
{
  "expo": {
    "name": "loco",
    "slug": "loco",
    "version": "0.1.3",
    "orientation": "portrait",
    "icon": "./assets/icon.jpg",
    "userInterfaceStyle": "dark",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#212832"
    },
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow this app to access your location even if the app is closed or not in use.",
          "locationWhenInUsePermission": "Allow this app to access your location when the app is in use.",
          "isIosBackgroundLocationEnabled": true,
          "isAndroidBackgroundLocationEnabled": true
        }
      ]
    ],
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": [
          "location",
          "fetch"
        ]
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#212832"
      },
      "icon": "./assets/icon.png",
      "permissions": [
        "ACCESS_FINE_LOCATION",
        "ACCESS_COARSE_LOCATION",
        "ACCESS_BACKGROUND_LOCATION",
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.ACCESS_BACKGROUND_LOCATION",
        "android.permission.FOREGROUND_SERVICE",
        "android.permission.FOREGROUND_SERVICE_LOCATION"
      ]
    },
    "extra": {
      "eas": {
        "projectId": "eacea42d-f4e8-4a94-b43a-f19dc934865e"
      }
    }
  }
}
```

In this current setup, the foreground updates work properly, but the app never seems to request background location. I am testing this on a development build, and a full build; I have also given the app all the required persmission: use the background while in use, and all the time.
I want you to go over all the code, and determine the issue and possible fixes. To help you, I have found online an article, and sample scripts for similar apps:

Location tracking in Expo and React Native

```
Location tracking in Expo and React Native
December 27, 2021

In recent years, on-demand services such as taxi and food delivery apps have become very popular and useful. One of the features behind this success, besides many other factors, is the real-time position tracking of their users.

In this guide, weâ€™ll explain how to track position in React Native even if the app is in the background, using two packages expo-location and expo-task-manager.

Getting started
ðŸ’¡ If youâ€™re new to React Native, this example will get you started quickly with Expo.

To use the expo-location package, it must first be installed.

$ expo install expo-location
If youâ€™re in a bare React Native project, you should also follow these additional installation instructions.

Then we import the package in our app:

import * as Location from "expo-location"
User location data is considered sensitive information, thatâ€™s why we need to ask permission otherwise, tracking wonâ€™t even start.

const foregroundPermission = await Location.requestForegroundPermissionsAsync()
Executing Location.requestForegroundPermissionsAsync() will display permission modal to the user and the foregroundPermission object varies depending on user action, it will have a key granted with the value true or false.

Then we use Location.watchPositionAsync(options, callback) to track the location when the app is in use.

ðŸ‘‰ Check all available options here: https://docs.expo.dev/versions/latest/sdk/location/#locationoptions

ðŸ‘‰ Callback is a function with location param that has coords with the following format: https://docs.expo.dev/versions/latest/sdk/location/#locationobjectcoords

// Location subscription in the global scope
let locationSubscrition = null

// Locatoin tracking inside the component
if (foregroundPermission.granted) {
  foregroundSubscrition = Location.watchPositionAsync(
    {
      // Tracking options
      accuracy: Location.Accuracy.High,
      distanceInterval: 10,
    },
    location => {
      /* Location object example:
        {
          coords: {
            accuracy: 20.100000381469727,
            altitude: 61.80000305175781,
            altitudeAccuracy: 1.3333333730697632,
            heading: 288.87445068359375,
            latitude: 36.7384213,
            longitude: 3.3463877,
            speed: 0.051263172179460526,
          },
          mocked: false,
          timestamp: 1640286855545,
        };
      */
      // Do something with location...
    }
  )
}
Then if we want to stop the location tracking we call the subscriber remove method this way:

locationSubscrition?.remove()
Location tracking in the background
The previous explanation only shows how to track the foreground location, once the user switches to another app or locks their phone, the location tracking stops.

To enable position tracking in the background we need to add some configurations to our app.config.json file.

ðŸ‘‰ In a bare React Native project check Task manager documentation.

Android permissions will be added automatically when the app is in use, but itâ€™s better to specify all permissions before sending the app to the store.

Hereâ€™s config I use:

{
  "expo": {
    ...
    "ios": {
      ...
      "infoPlist": {
        ...
        "UIBackgroundModes": [
          "location",
          "fetch"
        ]
      }
    },
		"android": {
	    ...
	    "permissions": [
				...
	      'ACCESS_BACKGROUND_LOCATION'
	    ]
	  }
	}
}
Before we track position in background we need to get permission in both foreground and background:

if (!foregroundPermission.granted) return
const backgroundPermission = await Location.getBackgroundPermissionsAsync()
Then we will use Location.startLocationUpdatesAsync, but this method requires a task working in the background, thatâ€™s why we need to install expo-task-manager.

$ expo install expo-task-manager
After installing and configuring the task manager, we need to define the location tracking task in the global scope:

Import the task manager:

import * as TaskManager from "expo-task-manager"
Hereâ€™s how to define the task globally:

const TASK_NAME = "BACKGROUND_LOCATION_TASK"

TaskManager.defineTask(TASK_NAME, async ({ data, error }) => {
  if (error) {
    console.error(error);
    return;
  }
  if (data) {
		/* Data object example:
      {
        locations: [
          {
            coords: {
              accuracy: 22.5,
              altitude: 61.80000305175781,
              altitudeAccuracy: 1.3333333730697632,
              heading: 0,
              latitude: 36.7384187,
              longitude: 3.3464008,
              speed: 0,
            },
            timestamp: 1640286402303,
          },
        ],
      };
    */
    const { locations } = data;
    const location = locations[0];

    if (location) {
      // Do something with location...
    }
  }
});

export default function App() {...}
Inside the app or any child component, we call Location.startLocationUpdatesAsync(taskName, options) method, this latter will trigger the defined task and run the callback.

ðŸ‘‰ All available options: https://docs.expo.dev/versions/latest/sdk/location/#locationtaskoptions

if (backgroundPermission.status === "granted") {
  Location.startLocationUpdatesAsync(TASK_NAME, {
    // The following notification options will help keep tracking consistent
    showsBackgroundLocationIndicator: true,
    foregroundService: {
      notificationTitle: "Location",
      notificationBody: "Location tracking in background",
      notificationColor: "#fff",
    },
  })
}
Letâ€™s not forget to stop the location tracking, for example if the user logs out, just by calling the following method:

Location.stopLocationUpdatesAsync(TASK_NAME)
Example
The following example will clarify the tracking process.

The app will show four buttons to start and stop location tracking when the app is in use or in the background. When the app starts, it will ask you to grant position tracking permissions in the foreground and background.

import React, { useEffect, useState } from "react"
import { StyleSheet, Text, View, Button } from "react-native"
import * as TaskManager from "expo-task-manager"
import * as Location from "expo-location"

const LOCATION_TASK_NAME = "LOCATION_TASK_NAME"
let foregroundSubscription = null

// Define the background task for location tracking
TaskManager.defineTask(LOCATION_TASK_NAME, async ({ data, error }) => {
  if (error) {
    console.error(error)
    return
  }
  if (data) {
    // Extract location coordinates from data
    const { locations } = data
    const location = locations[0]
    if (location) {
      console.log("Location in background", location.coords)
    }
  }
})

export default function App() {
  // Define position state: {latitude: number, longitude: number}
  const [position, setPosition] = useState(null)

  // Request permissions right after starting the app
  useEffect(() => {
    const requestPermissions = async () => {
      const foreground = await Location.requestForegroundPermissionsAsync()
      if (foreground.granted) await Location.requestBackgroundPermissionsAsync()
    }
    requestPermissions()
  }, [])

  // Start location tracking in foreground
  const startForegroundUpdate = async () => {
    // Check if foreground permission is granted
    const { granted } = await Location.getForegroundPermissionsAsync()
    if (!granted) {
      console.log("location tracking denied")
      return
    }

    // Make sure that foreground location tracking is not running
    foregroundSubscription?.remove()

    // Start watching position in real-time
    foregroundSubscription = await Location.watchPositionAsync(
      {
        // For better logs, we set the accuracy to the most sensitive option
        accuracy: Location.Accuracy.BestForNavigation,
      },
      location => {
        setPosition(location.coords)
      }
    )
  }

  // Stop location tracking in foreground
  const stopForegroundUpdate = () => {
    foregroundSubscription?.remove()
    setPosition(null)
  }

  // Start location tracking in background
  const startBackgroundUpdate = async () => {
    // Don't track position if permission is not granted
    const { granted } = await Location.getBackgroundPermissionsAsync()
    if (!granted) {
      console.log("location tracking denied")
      return
    }

    // Make sure the task is defined otherwise do not start tracking
    const isTaskDefined = await TaskManager.isTaskDefined(LOCATION_TASK_NAME)
    if (!isTaskDefined) {
      console.log("Task is not defined")
      return
    }

    // Don't track if it is already running in background
    const hasStarted = await Location.hasStartedLocationUpdatesAsync(
      LOCATION_TASK_NAME
    )
    if (hasStarted) {
      console.log("Already started")
      return
    }

    await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
      // For better logs, we set the accuracy to the most sensitive option
      accuracy: Location.Accuracy.BestForNavigation,
      // Make sure to enable this notification if you want to consistently track in the background
      showsBackgroundLocationIndicator: true,
      foregroundService: {
        notificationTitle: "Location",
        notificationBody: "Location tracking in background",
        notificationColor: "#fff",
      },
    })
  }

  // Stop location tracking in background
  const stopBackgroundUpdate = async () => {
    const hasStarted = await Location.hasStartedLocationUpdatesAsync(
      LOCATION_TASK_NAME
    )
    if (hasStarted) {
      await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME)
      console.log("Location tacking stopped")
    }
  }

  return (
    <View style={styles.container}>
      <Text>Longitude: {position?.longitude}</Text>
      <Text>Latitude: {position?.latitude}</Text>
      <View style={styles.separator} />
      <Button
        onPress={startForegroundUpdate}
        title="Start in foreground"
        color="green"
      />
      <View style={styles.separator} />
      <Button
        onPress={stopForegroundUpdate}
        title="Stop in foreground"
        color="red"
      />
      <View style={styles.separator} />
      <Button
        onPress={startBackgroundUpdate}
        title="Start in background"
        color="green"
      />
      <View style={styles.separator} />
      <Button
        onPress={stopBackgroundUpdate}
        title="Stop in foreground"
        color="red"
      />
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
  switchContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  button: {
    marginTop: 15,
  },
  separator: {
    marginVertical: 8,
  },
})
Notes:
ðŸ‘‰ Location tracking in the background is not always consistent, it depends on the OS and the configuration of the device.

ðŸ‘‰ If you plan to submit your app to Google Play, you should notify the user, with a modal showing that you are using their location in the background before requesting location tracking.
```

location-tracker.js
```javascript
import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, FlatList, Button } from 'react-native';
import dayjs from 'dayjs'

import * as LocationTrackerTask from './location-tracker-task'
import * as Firebase from './firebase-helper'
import { addLocation, getExistingLocations, clearAllRuns } from './location-tracker-store';

export const LocationTracker = () => {
    const [currentTrackingId, setCurrentTrackingId] = useState();
    const [isRunning, setIsRunning] = useState(false);
    const [data, setData] = useState([]);
    const [lastTimeStamp, setLastTimeStamp] = useState();

    const startTracking = async () => {
        let id = `TRACK_${getId()}`;
        setCurrentTrackingId(id);

        Firebase.init();

        await LocationTrackerTask.start();

        LocationTrackerTask.listen(async (location) => {
            await addLocation(id, location)
            setLastTimeStamp(location.timestamp);

            Firebase.storeLocation(id, location)
        });

        setIsRunning(true);
    }

    const stopTracking = async () => {
        await LocationTrackerTask.stop();
        setIsRunning(false);
    }

    const clearAllData = async () => {
        await stopTracking();
        await clearAllRuns();
        setLastTimeStamp(null);
        setData([])
    }

    useEffect(() => {
        (async () => {
            if (!currentTrackingId) return;

            const dataTemp = await getExistingLocations(currentTrackingId)
            setData(dataTemp)
        })();
    }, [lastTimeStamp])

    return (
        <View style={styles.container} >
            <View style={styles.topBar}>
                <Text style={styles.title}>Location Tracking - {isRunning ? 'Running' : 'Stopped'}</Text>
                <Text style={styles.title}>Total Items: {data.length}</Text>
                {!isRunning ?
                    <Button
                        style={styles.button}
                        onPress={startTracking}
                        title="Start New"
                        color="#0788FF"
                        accessibilityLabel="Start a new Tracker"
                    /> :

                    <Button
                        style={styles.button}
                        onPress={stopTracking}
                        title="Stop"
                        color="#0788FF"
                        accessibilityLabel="Stop the current Tracker"
                    />
                }
                <Button
                    style={styles.button}
                    onPress={clearAllData}
                    title="Clear"
                    color="#0788FF"
                    accessibilityLabel="Clear all items from storage"
                />
            </View>
            <FlatList
                backgroundColor={"white"}
                data={data}
                renderItem={({ index, item }) => {
                    const time = dayjs(item.timestamp);

                    return (
                        <View key={index} style={styles.item}>
                            <Text style={styles.title}>{time.format('HH:mm:ss')}</Text>
                            <Text>{item.coords.longitude} {item.coords.latitude}</Text>
                        </View>
                    )
                }}
            />
        </View>
    );
}

const styles = StyleSheet.create({
    topBar: {
        padding: 10,
        flexDirection: 'column',
        alignItems: 'center',
        borderBottomWidth: 1,
    },
    container: {
        width: '100%',
    },
    item: {
        borderBottomWidth: 1,
        padding: 10,
    },
    title: {
        fontWeight: 'bold'
    },
    button: {
        backgroundColor: '#0788FF',
        borderColor: '#0788FF',
        borderWidth: 1
    }
});

const getId = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5)
```

firebase-helper.js
```javascript
import * as firebase from 'firebase';
import { getUniqueId } from 'react-native-device-info';
import dayjs from 'dayjs';

export const init = () => {
    if (firebase.apps.length != 0) return;
    const config = {
        apiKey: "AIzaSyDYAZbmSlgcazgxxT4t2MUymkzjkunj9G8",
        authDomain: "locationtracker-281711.firebaseapp.com",
        databaseURL: "https://locationtracker-281711.firebaseio.com",
        projectId: "locationtracker-281711",
        storageBucket: "locationtracker-281711.appspot.com",
        messagingSenderId: "727349450304",
        appId: "1:727349450304:web:a9bf75e63dd6b4c55ab1a5"
    };

    firebase.initializeApp(config);
}

export const storeLocation = (id, location) => {
    try {
        const itemId = dayjs(location.timestamp).format('HHmmss')
        firebase.database().ref(`tracking/${id}/${itemId}`).set({
            id: `${id}_${itemId}`,
            location
        });
        
        firebase.database().ref(`tracking/${id}/latest`).set({
            id: `${id}_${itemId}`,
            location
        });
    } catch (e) {
        console.log('Permission denied')
    }
}

const getId = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5)
```

location-tracker-store.js
```javascript
import AsyncStorage from '@react-native-community/async-storage';

export const addLocation = async (id, location) => {
    let existingList = await getExistingLocations(id);


    const jsonValue = JSON.stringify({list: [
        location,
        ...existingList
    ]})

    await AsyncStorage.setItem(id, jsonValue)
}

export const getExistingLocations = async id => {
    const existingLocationsRaw = await AsyncStorage.getItem(id);
    if(!existingLocationsRaw) return [];
    
    try { 
        const existingLocation = JSON.parse(existingLocationsRaw);
        return existingLocation.list;
    } catch (e) {
        console.error(e);
    }

    return [];
}

export const clearAllRuns = async () => {
    try {
        const keys = await AsyncStorage.getAllKeys();
        await AsyncStorage.multiRemove(keys);
    } catch (error) {
        console.error(error)
    }
}
```

location-tracker-task.js
```javascript
import * as Location from 'expo-location';
import * as TaskManager from 'expo-task-manager';

const LOCATION_TRACKER_TASK_NAME = 'Background_Location_Tracker';

export const start = async () => {
    let permission = await Location.requestPermissionsAsync();
    if (permission.status !== 'granted') {
        throw 'Permission to access location was denied';
    }

    await Location.startLocationUpdatesAsync(LOCATION_TRACKER_TASK_NAME, {
        accuracy: Location.Accuracy.Highest,
        showsBackgroundLocationIndicator: true,
        timeInterval: 10000,
        distanceInterval: 2,
        foregroundService: {
            notificationTitle: 'Location Tracker',
            notificationBody: 'We are currently tracking your location',
            notificationColor: '#FF0000'
        },
        activityType: Location.ActivityType.Fitness
    });
}

export const listen = callback => {
    TaskManager.defineTask(LOCATION_TRACKER_TASK_NAME, async ({ data: { locations }, error }) => {
        if (error) {
            throw error;
        }
        locations.map(location => callback(location));
    });
}

export const stop = async () => {
    try {
        await TaskManager.unregisterTaskAsync(LOCATION_TRACKER_TASK_NAME)
    } catch (e) {
        console.log('Was already stopped')
    }
}
```